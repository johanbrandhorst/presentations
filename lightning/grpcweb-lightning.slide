Using gRPC-Web to connect GopherJS apps to gRPC backends
19 Sep 2017

Johan Brandhorst
Backend Developer, InfoSum
johan.brandhorst@gmail.com
@johanbrandhorst
https://jbrandhorst.com

: I'm Johan, I work at a Big Data startup in Basingstoke called InfoSum.
: I've been using Go for 1.5 years, loving it. In my spare time I enjoy working on
: Open Source projects, including some of my own. I've contributed to the Go programming language
: and I run my own Go blog, writing mostly about things related to my projects and gRPC.
: I'm here today to talk about my GopherJS gRPC-Web bindings.

* Overview

- GopherJS Bindings for gRPC-Web.
- Allows the creation of browser based Go apps, connecting to generic gRPC backends.
- Supports unary, server-side, client side and bidirectional streaming endpoints.

: My library allows users to create GopherJS apps that can effortlessly communicate with
: any gRPC backend service, without the need for a payload translation layer. It supports
: all 4 streaming modes normally supported by gRPC. Lets see what that looks like.

* The setup

.image better_way.svg

: This diagram shows an overview of the network flow of the library, to give you more of
: an idea of the whole picture. GopherJS apps run in the browser, and with my library, communicating
: with the backend becomes as easy as writing a Go gRPC client.
: Lets take a look at the technologies that my library is built on.

* Building blocks

- GopherJS
- Improbable's gRPC-Web Client
- Websockets

: I first heard of gRPC-Web about the same time as I was first playing around with GopherJS, and I thought they'd
: make for an excellent combination in an open source project. GopherJS, for the uninitiated, is a Go to JS Transpiler,
: unlocking the magic of Go in the frontend and, more importantly, saving us from having to write any JavaScript.
: gRPC-Web is a new project for making communications between the frontend and backend as easy as gRPC has made
: inter-microservice communication. There was an effort from Google to release an official client, scheduled for Q1 2017,
: but it seems the will to release that has died down for now. Instead, Improbable released their third party
: spec compliant implementation in April 2017, and this is the version I've built my library on.
: Websockets are supported by all major browsers and allow bidirectional streaming between the browser and the backend.
: They are used in my library to support client-side and bidirectional streaming from the browser.
: Lets dive further into the capabilities.

* GopherJS gRPC-Web and Protobuf bindings

- Combines the benefits of GopherJS with the benefits of gRPC-Web
- [[https://github.com/johanbrandhorst/protobuf]]
- `protoc-gen-gopherjs` built on top of GopherJS ProtobufJS bindings
- No dependency on `protoc`-generated JS files
- Supports Client-side streaming via Websocket proxy

: My GopherJS gRPC-Web bindings allow the user to write a normal gRPC server backend and consume it from a GopherJS app
: in the browser. The generated files have no dependency on separately generated JS files, unlike the Improbable TS generator.
: All streaming modes are supported, even client side and bidirectional streaming, which is not supported
: by the Improbable gRPC-Web client. This is in addition to the official gRPC-Web spec which does not define any support
: for client side or bidirectional streaming at this time.
: Lets look at this in action with a quick example.

* A simple book service

.code book_service.proto /START OMIT/,/END OMIT/

: First step is to define the interface between the backend and the browser. We do this with a protofile definition.
: This abbreviated example shows how to define RPC methods with the 4 different modes: Unary, Server Streaming, Client Streaming and Bidirectionally streaming.
: The full proto file can be found on my example repo.
: Now that we've defined the interface we'll need to generate the code.

* Generate the code

Get the plugin:

    go get -u github.com/johanbrandhorst/protobuf/protoc-gen-gopherjs

Generate with protoc:

    protoc --gopherjs_out=plugins=grpc:./client/proto/library/ proto/book_service.proto

: The generation step requires protoc-gen-gopherjs to be installed, which you can get by running go get ...
: This generation leaves us with the package "library" which provides the interface our frontend code can use.
: Of course, the same protofile should be used to generate the backend interface.
: Now that we've generated the files, lets see how they are used in our frontend app.

* Creating the frontend client

.code generated.go

: If you've ever written a gRPC Go Client before this step should feel very familiar. The code generated by protoc-gen-gopherjs
: is designed to be as similar as possible to that of a native Go client. We have a function for creating
: a new client for each service defined, and methods for each endpoint on that service.
: Note that all the methods are blocking, and since we're working with Go that gets compiled to Javascript,
: it means we have to wrap all our calls in goroutines. It's one of the quirks of GopherJS.
: I'm not going to show too much of the client code here because it can be implemented in many different ways.
: Lets see it all in action!

* 

.iframe https://grpcweb.jbrandhorst.com/ 600 975

* Conclusion

gRPC-Web makes the browser a first class citizen of the gRPC ecosystem,
and my library adds the power of GopherJS for a very compelling frontend developer experience.

.image diff_side.png _ 975

: We've shown that it's possible today to write a frontend client in Go, communicate with a regular
: gRPC backend over HTTP2/Websockets via a small proxy, and the gRPC backend can treat the frontend like
: any other gRPC client.

* Links

- GopherJS gRPC-Web Bindings repo: [[https://github.com/johanbrandhorst/protobuf]]
- Demo website: [[https://grpcweb.jbrandhorst.com]]
- Demo website repo: [[https://github.com/johanbrandhorst/grpcweb-example]]
- Improbable TypeScript gRPC-Web Client: [[https://github.com/improbable-eng/grpc-web]]
- Paul Jolly's GolangUK 2017 GopherJS React Bindings Presentation: [[https://youtu.be/emoUiK-GHkE]]
- My blog post further detailing the GopherJS gRPC-Web Bindings: [[https://jbrandhorst.com/post/gopherjs-grpcweb/]]
- My blog post about the websocket proxy : [[https://jbrandhorst.com/post/client-streaming/]]
- These slides (_so_meta_): [[https://github.com/johanbrandhorst/grpcweb-presentation/tree/master/grpcweb-lightning.slide]]

: These are some of the links you can use to get more information about the project. I'll get a link to the slides
: sent around later.

* Thanks to

- [[https://improbable.io][Improbable]] for their amazing gRPC-Web library (special shoutout to [[https://twitter.com/mwitkow][Michał Witkowski]] for his amazing gRPC community contributions)
- [[https://github.com/neelance][Richard Musiol]], [[https://github.com/shurcooL][Dmitry Shuralyov]] and others in the GopherJS community.
- [[https://github.com/tmc][Travis Cline]], the author of the [[https://github.com/tmc/grpc-websocket-proxy][grpc-websocket-proxy]] which inspired me to create a binary websocket proxy.
- [[https://twitter.com/_myitcv][Paul Jolly]] for his excellent work on GopherJS and the React bindings and priceless help with reviewing my slides.
- My partner Charlotte for listening to my jibberish technical presentation

: Improbable for their work on the gRPC-Web library, and especially Michał Witkowski for his gRPC community contributions
: Richard Musiol and Dmitry Shyralyov and others in the GopherJS community.
: Travis Cline for his work on the grpc-websocket-proxy which inspired me to write a protobuf websocket proxy
: Paul Jolly for his excellent work on GopherJS and the React bindings and priceless help with reviewing my slides.
: My partner Charlotte for giving me valuable feedback on my verbal communication.

* Questions?

.image gopher.png _ 400

.caption _Gopher_ by [[http://reneefrench.blogspot.co.uk/2014/08/blog-post_4.html][Renée French]]
