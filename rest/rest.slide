Why REST is dead and what you should use instead
19 October 2017

Johan Brandhorst
Software Engineer, InfoSum
johan.brandhorst@gmail.com
@johanbrandhorst
https://jbrandhorst.com

: Hi I'm Johan, I work at InfoSum, a startup based right by the basingstoke train station.
: I've been a professional programmer for 5 years, working mostly with Go, Python and C++.
: I have a couple of open source projects on GitHub, mostly written in Go, my current favourite language.
: Today I want to talk about JSON/REST, what's wrong with it, and what you should be using for your web app instead.
: To do that, I'm going to be using my kitten.

* Meet Olive

.image olive.jpg _ 500

.caption _Olive_, Full Stack Developer

: This is Olive. Olive is a full stack developer. She's running a website trafficking catmint, catnip
: and other cat paraphenelia. It's doing pretty well, and she's always on the
: run from the cat cops trying to shut her down.

* Olives technology stack

- React/Vue JavaScript frontend
- NodeJS backend
- JSON REST API

.image status_quo.svg

: She enjoys using JavaScript and her backend server is written in NodeJS.
: Her frontend is written in some modern framework like React or Vue or whatever is the current FOTM.
: She uses a RESTful JSON API to communicate between her frontend and backend. Olive is happy with her stack.
: But Olive is wrong.

* Olive is wrong

.image no.jpg _ 400

* Why Olive should worry

- JSON is inefficient, verbose, slow
- Handwritten interfaces on both sides
- Difficult keeping code in sync
- Custom error handling (map HTTP errors?)
- No streaming support

.image status_quo.svg

: JSON is ok for things like human readable configuration. It is not good for machine-to-machine communications. (numbers, commas).
: Manually writing the code to call the API in the frontend, then manually writing the code to listen for the API calls in the
: backend. This can lead to a difficult keeping the code between the frontend and backend in sync.
: Two sources of truth in sync.
: No generic error handling beyond HTTP codes, which are often less accurate and well defined than you might want.
: These are only some of the issues with the current standard solution, but before we go into the better way of doing things, lets
: take a step back and look at Olives backend infrastructure.

* Olives backend/mobile infrastructure

- C++/Java/Node/Go microservices
- Android Java client
- gRPC and protobuf communications layer

.image grpc_diagram.png _ 600

: Olive recently rewrote most of her backend infrastructure away from one monolithic PHP app into a scalable microservices
: infrastructure. As part of this she adopted gRPC and protobuf as a communications layer between her microservices.
: This introduced her to the many benefits of using a purpose built protocol and transport layer.
: What the heck is protobuf and gRPC you ask? Lets take a look.

* Protobuf

- Binary serialization format
- Define once, generate idiomatic code for many languages
- Automatically backwards and forwards compatible
- Up to [[https://auth0.com/blog/beating-json-performance-with-protobuf/][6 times faster marshalling than JSON]]
- 9 officially supported languages, many more third party implementations

.image protobuf.jpg _ 800

.caption Source: [[https://developers.google.com/protocol-buffers/][Google Protocol Buffers]]


: Protobuf was originally an internal Google project that they open sourced with version 2.
: It is a serialization format, like JSON. Unlike JSON, protobuf data is very quickly and efficiently packaged
: onto and from the wire.
: You define a file, called a "protofile", and generate code for the language(s) of your choice.
: It comes with automatic backwards and forwards compatibility.
: It has been widely used within Google and other large infrastructure companies for many years.
: Today, protobuf has official support for C++, Go, Java, Python, Ruby, C#, Objective C, Javascript (NodeJS) and PHP.
: There are many third party implementations to add support for other languages.

* 

.image protobuf_times.png _ 1050

.caption Source: [[https://auth0.com/blog/beating-json-performance-with-protobuf/][Auth0 JSON/Protobuf comparison]]

: Quick comparison image from the article referenced on the previous slide. 

* gRPC

- Communications protocol
- Generate idiomatic client and server libraries
- 1:N, N:1, N:M streaming support
- Defined error codes for unambiguous errors
- Donated to CNCF

.image grpc.png _ 700

.caption Source: [[https://grpc.io/][gRPC.io]]

: gRPC is a communications protocol, built on top of HTTP2. By default gRPC uses protobuf as its serialization format,
: and many of the existing protobuf language generators can now generate gRPC Client and Server code.
: Both Protobuffers and gRPC are developed and pushed by Google. gRPC has been donated to the Cloud Native Computing Foundation.
: (Pause)
: Olive has been reaping the benefit of this refactor for a while now, but what if all these nice things
: could be had in our frontend-backend communications?

* Introducing gRPC-Web

- gRPC and Protobuf for the browser
- Efficiently encoded binary payloads
- 1:N streaming
- Backwards and forwards compatibility
- Uses modern tech (HTTP2/Fetch API)

.image grpcweb.jpg _ 750

.caption Source: [[https://improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis][Improbable.io]]

: Of course, we can! gRPC-Web allows most (not all, yet!) of the benefits of gRPC to be used in the frontend. We get
: binary payloads, server side streaming, generated backward/forward compatible clients, no more fighting with the frontend team
: about making changes! They just regenerate their interface and plug in your new functionality.
: gRPC-Web uses modern web technologies like HTTP2 and Fetch when possible, and transparently downgrades to HTTP1 and XHR when necessary.
: There is an official spec developed by Google, and last year there was work on an official client and proxy by Google,
: targeted for a Q1 2017 release, but the work on that seems to have died down.
: Instead, there is a spec-compliant client available, developed by Improbable, a London based company working with games and cloud technology.
: They currently use the client in some production environments.

* Caveats

- No N:1 or N:M streaming support
- Requires server-side proxy
- No official _client_

.image facepalm.jpg _ 500

: The browser is not like any other gRPC client. There is currently no support for client side or bi-directional streaming.
: This will eventually be supported, but is subject to finilisation of the Streams browser API. I personally think this holdup
: is the reason Google halted their work on the gRPC-web client.
: It also requires the use of a small proxy, translating HTTP1 requests to HTTP2 and mapping certain headers.
: The fact that we don't have an official google-backed client is a downside for me, though the existing client
: is by no means low quality. The spec, of course, is officially part of the gRPC ecosystem.
: (Pause)
: Next I want to talk a little about my personal project related to gRPC-Web.

* Sidetrack: GopherJS

- Go to Javascript _transpiler_

.image gopherjs.png _ 450

.caption Source: [[https://twitter.com/gopherjs][GopherJS Twitter]]

: I mentioned at the start that I greatly enjoy Go, and one Go community project I particularly enjoy using is called GopherJS.
: GopherJS allows you to transpile Go code to javascript and run it in the browser. There are many reasons not to manually write
: any javascript, but that's an entire talk in itself. Lets just say I've taken an interest in working with GopherJS.

* GopherJS Bindings for gRPC-Web

- [[https://github.com/johanbrandhorst/protobuf]]
- Combines the benefits of GopherJS with the benefits of gRPC-Web
- Supports Client-side streaming via Websocket proxy

.image better_way.svg

: My current personal pet project takes gRPC-Web and combines it with GopherJS. It also adds support for
: client side and bidirectional streaming by mixing in some websockets.
: We're gonna help Olive on the way and start defining the interface she can use for her frontend.
: We do this with a protofile definition.

* A simple cat shop service

.code cat_service_unary.proto

: Switch to prepared demo page
: In the words of Fermat: I have a truly remarkable proof of this which this projector is too small to contain

* A server streaming method

.code cat_service_sstream.proto

: Switch to prepared demo page

* A client streaming method

.code cat_service_cstream.proto

: Switch to prepared demo page

* A bidirectionally streaming method

.code cat_service_bidi_stream.proto

: Switch to prepared demo page
: Olive will sell catnip and toys like never before after this upgrade!

* Conclusion

gRPC-Web is a great alternative to JSON/REST for frontend-backend communications.

.image diff_side.png _ 975

.caption Graphic: Paul Jolly ([[https://twitter.com/_myitcv][@_myitcv]])

: To sum up, we now know whats wrong with JSON/REST, and have a real alternative in gRPC-web.
: I hope after this presentation I will have at least whet your appetite for trying something other than the usual
: RESTful JSON API for your next frontend project. Olive will certainly be sure to reconsider her design choices!

* Links

- Improbably blog post introducing gRPC-Web: [[https://improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis]]
- Improbable TypeScript gRPC-Web Client: [[https://github.com/improbable-eng/grpc-web]]
- My demo website: [[https://grpcweb.jbrandhorst.com]]
- My blog post further detailing the GopherJS gRPC-Web Bindings: [[https://jbrandhorst.com/post/gopherjs-grpcweb/]]
- My blog post about the websocket proxy : [[https://jbrandhorst.com/post/client-streaming/]]
- These slides (_so_meta_): [[http://talks.godoc.org/github.com/johanbrandhorst/presentations/rest/rest.slide]]

: These are some of the links you can use to get more information about the project. 
: I'll put a link to these slides up on the meetup page later tonight.

* Thanks to

- [[http://desklodge.com/basingstoke/][Desklodge]]
- James and Alex for organising this meetup
- [[https://improbable.io][Improbable]] for their amazing gRPC-Web library
- The GopherJS community

: Desklodge for hosting us again.
: James and Alex for organising the meetup.
: Improbable for their work on the gRPC-Web library,
: The GopherJS community for being so awesome.

* Questions?

.image gopher.png _ 500

.caption _Gopher_ by [[http://reneefrench.blogspot.co.uk/2014/08/blog-post_4.html][Renée French]]

: https://github.com/grpc/grpc/blob/master/doc/g_stands_for.md
: 1.8 'g' stands for 'generous'
