Creating GopherJS Apps with gRPC-Web
3rd Feb 2018

Johan Brandhorst
Backend Developer, InfoSum
johan.brandhorst@gmail.com
@johanbrandhorst
https://jbrandhorst.com

: Swede in England. InfoSum, data collaboration startup.
: Using Go for 2 years.
: Open Source projects, Contributed to the Go programming language.
: Blog.
: Topic: My open source project, creating apps with gRPC-Web
: Next up: Quick overview
: 00:30

* Today we will

- Learn about Protobuf, gRPC, gRPC-Web, GopherJS
- Learn to write GopherJS apps with gRPC-Web
.image protobuf.jpg 70 _
.image grpc.png 60 _
.image logo.svg 170 _
.caption _gRPC-Web_ _gopher_ by [[https://twitter.com/egonelbre][Egon Elbre]]

: Today we will learn about
: Protobuf, gRPC, gRPC-Web, GopherJS
: Introduce gRPC-Web for Go
: Create simple GopherJS app with gRPC-Web
: Next up: Lets start with Protobuf
: 01:00

* Protobuf

: Show of hands, who's (heard of)/using protobuf?

* Protobuf

- Google's IDL
- Binary serialization format
- Backwards compatible
- Code generation
- 9 officially supported languages
- Used widely at Google, Twitter, Twitch and more

.image protobuf.jpg _ 700
.caption Source: [[https://developers.google.com/protocol-buffers/][Google Protocol Buffers]]

: Googles Interface Description Language, Binary serialization format, Backwards compatibility, Code generation
: Used for service-to-service communication payloads and data storage
: Fast! (20-100 times faster than XML according to Google),
: Wide official language support, including Go, C++, Java, Python + third party libraries
: (As far as I can tell, this is the best logo of protobuf that exists)
: Next up: What does it look like?
: 02:00

* Protofiles

.code protofile.proto 0,/CatToy/+4

: Go package option
: Messages
: Scalars
: Advanced features; Oneof, enum, maps, arrays, nested messages.
: Will come back to services
: Next up: What does the Go code look like?
: 02:30

* Generated Go code

.code protofile.pb.go /type CatToy/,+4
.code protofile.pb.go /GetId/,+5
.code protofile.pb.go /GetPrice/,+5

: Getters
: Struct tags
: Marshalling performed through reflection
: Gogoproto
: Next up: How use protobuf for service-service communications?
: 03:00

* gRPC

: Show of hands again, who's heard of/using gRPC?

* gRPC

- RPC protocol
- Built on HTTP/2
- Protobuf payloads
- Generate client and server stubs
- Streaming

.image grpc.png _ 600
.caption Source: [[https://grpc.io][gRPC.io]]

: RPC protocol, Built on HTTP/2
: Serialization agnostic, but normally protobuf
: Like protobuf, Code generation
: Powerful streaming capabilities (server, client, bidi)
: Backbone Google internal comms
: Next up: What can we do with it?
: 03:30

* Polyglot microservice architectures

.image grpc_diagram.svg _ 850
.caption Source: [[https://grpc.io][gRPC.io]]

: Server: C++,
: Client: Java, Ruby, Python
: Next up: What does it look like?
: 04:00

* Protobuf services

.code protofile.proto

: Services map to gRPC servers and clients
: Next up: What does the generate code look like?
: 04:30

* Generated client and server interfaces

.code protofile.pb.go /type CatServerClient/,/return &catServer/+1
.code protofile.pb.go /type CatServerServer/,/}/

: Generated client
: User implements service interface
: Next up: Can we use this in the browser?
: 05:00

* gRPC-Web

: Show of hands, who's heard of gRPC-Web?

* gRPC-Web

- gRPC for the browser
- Protobuf serialization
- Server-side streaming
- Browser becomes just another gRPC client

.image grpc_browser.svg 250 _
.caption Source: [[https://grpc.io][gRPC.io]]

: Brings benefits of gRPC to the browser
: Official spec
: Protobuf
: Server-side streaming, no client-side or bidi streaming
: Next up: Lets take a look at an implementation
: 05:30

* gRPC-Web Client from Improbable

- TypeScript implementation
- HTTP/2, Fetch
- Go gRPC-Web proxy
- Used in production

.image grpcweb.jpg 310 _
.caption Source: [[https://improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis][Improbable.io]]

: Spec compliant TypeScript implementation
: HTTP/2 downgrades to HTTP/1.1
: Fetch downgrades to XHR
: Go proxy package, binary
: Diagram shows both types in use
: Used in production at Improbable
: Next up: But can we run Go in the browser?
: 06:00

* GopherJS

: Who's heard of GopherJS? Using it?

* GopherJS

- Go to JavaScript transpiler
- Supports [[https://github.com/gopherjs/gopherjs#what-is-supported][_nearly_]] everything
- Most of standard library tests pass
- Used by [[https://perkeep.org/][Perkeep]] (née Camlistore), [[https://discussions.agilebits.com/discussion/84114/question-on-how-1password-x-uses-javascript-transpiled-go-code/p1?new=1][1Password X]], [[https://savo.la/talks/gopherjs/][Ninchat]]
- Community bindings

.image gopherjs.svg _ 350
.caption _Surfing_ _gopher_ by [[https://twitter.com/egonelbre][Egon Elbre]]

: Transpiler written by Richard Musiol
: Updated with each Go release, Online playground
: Supports nearly whole of standard library, including goroutines
: Community bindings (react, vue, dom, websocket)
: Used in production by OSS and private companies
: Next up: So what do we get if we put all of this together?
: 07:00

* gRPC-Web for Go

: My open source project

* gRPC-Web for Go

- Brings gRPC-Web to Go
- Designed for Go-gRPC familiarity
- Independent generated files
- Full streaming support (!)

.image logo.svg _ 300
.caption _gRPC-Web_ _gopher_ by [[https://twitter.com/egonelbre][Egon Elbre]]

: Combine GopherJS with gRPC-Web
: Bindings for Improbable gRPC-web client
: Designed like Go gRPC clients
: Generator independent from protoc
: Streaming through websocket proxy
: Next up: What can we do with it?
: 08:00

* Use cases

- GopherJS browser apps
- GopherJS browser extensions
- GopherJS _Electron_ apps
- Custom gRPC Service frontends

.image logo.svg _ 300
.caption _gRPC-Web_ _gopher_ by [[https://twitter.com/egonelbre][Egon Elbre]]

: Browser apps
: Browser extensions
: Electron apps
: Custom frontends
: Anywhere frontend talks to backend
: Next up: What does it look like?
: 08:30

* Generated GopherJS stubs

.code protofile.pb.gopherjs.go /type CatServerClient/,/NewClient/+2

: Same API as Go gRPC client
: Next up: Lets take it for a spin!
: 09:00

* Demo

: Design interface (involve audience)
: Attach JS handler to handler click, writing result of query to page
: 24:00

* Conclusion

- Write your own browser app with Go and gRPC
- Integrate with existing gRPC systems

.image ecosystem.png _ 975
.caption Graph by [[https://twitter.com/_myitcv][Paul Jolly]]

: Learned to use Go and gRPC in the browser
: Shown gRPC integration
: 24:30

* Thanks to

- FOSDEM, Go Devroom organizers
- [[https://improbable.io][Improbable]], [[https://twitter.com/mwitkow][Michał Witkowski]]
- [[https://github.com/neelance][Richard Musiol]], [[https://github.com/shurcooL][Dmitry Shuralyov]], GopherJS community
- [[https://github.com/tmc][Travis Cline]], author of [[https://github.com/tmc/grpc-websocket-proxy]]
- [[https://twitter.com/_myitcv][Paul Jolly]]

: FOSDEM, Go Devroom organizers
: Improbable for their gRPC-Web library (special shoutout to Michał Witkowski)
: Richard Musiol, creator of GopherJS (who is working on WASM now!).
: Dmitry Shuralyov for putting his time into maintaining GopherJS.
: Travis Cline, the author of the grpc-websocket-proxy which inspired me to create a binary websocket proxy.
: Paul Jolly for his excellent work on GopherJS and the React bindings and for pushing me to present my own work.
: 25:00

* Questions?

.image gopher.png _ 500

.caption _Gopher_ by [[http://reneefrench.blogspot.co.uk/2014/08/blog-post_4.html][Renée French]]
