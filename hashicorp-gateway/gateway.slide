The HashiPet API

Johan Brandhorst-Satzkorn

: I'm Johan, I joined HashiCorp in March to work on Boundary. I've really enjoyed all the R&D weekly sessions so far and I'm excited to be here today to talk a little bit about an open source project that's dear to me. Let's have a quick look at what we'll cover today.
: Next up: Overview

* Overview

- Introduce the gRPC-Gateway
- Create an API service
- Explore some lesser known features

.image witch.svg 300 _
.caption Gopher by [[https://twitter.com/egonelbre][@egonelbre]].

: Today we're going to talk about an open source project that I've been a maintainer of for the last few years, the gRPC-Gateway. We're going to do that by building a basic API service, the HashiPet API. We'll then explore some lesser known features of the gRPC-Gateway which may be useful to existing users. But to do that, we're going to tell a story, and every story needs a protagonist. So lets meet our protagonist, the most eligible bachelor of the talk-pets slack channel. I am, of course, talking about Floyd.

* Floyd

.image floyd.jpeg 500 _
.caption Floyd, full-stack engineer

: Floyd, if you are not familiar with him, is a pig who lives with Justin Herreman. He featured in a Micro Conversation last week, and if you didn't watch that make sure to go back and look at the recording, it was great. It was all belly rubs and oinks. Make sure to join the talk-pets channel as well, it has undoubtedly been one of the highlights of the Slack so far for me. Anyway, Floyd is a full-stack engineer and he's long wanted to build an API for the talk-pets channel, so lets see how he can do that today.

* A new API service

- Floyd lead engineer
- HashiPet API
- Floyd loves the HashiCorp stack

.image hashicorp_stack.png 350 _
.caption HashiStack

: Floyd will be the lead engineer, and he's a big fan of the HashiCorp suite of products. I'm told his favorite product is Vault. He's has decided that there is no reason to abandon the long-honored tradition of prefixing anything even slightly related to HashiCorp with the "hashi"-prefix, so naturally he's building a HashiPet API. He's done a bit of Go and enough JavaScript and HTML to be dangerous, but he prefers to work in the backend. He's been doing some perusing of the HashiCorp open source products and noticed a trend - some of them are using a technology called the gRPC-Gateway to build their HTTP APIs. What is the gRPC-Gateway?

* What is the gRPC-Gateway?

- Translates gRPC to HTTP/JSON and back
- Used by many HashiCorp products (Boundary, Waypoint, HCP)
- Generates server-side and client-side SDKs
- Floyd wants to use the gRPC-Gateway

.image gateway.png 300 _
.caption Technical mumbo-jumbo

: The gRPC-Gateway is technically a way to translate something called a gRPC API to a HTTP/JSON API and back, but for our purposes, we can consider it to be more of a framework for building well-typed HTTP APIs using Protocol buffers. If any or all of that sounded like technical mumbojumbo, don't worry, Floyd is going to dig into this practically in a moment which will hopefully help paint more of a picture. It's used by Boundary, Waypoint, HCP and many other non-HashiCorp projects for their HTTP APIs, both public and private. It lets you generate server and client SDKs from a single source of truth, your API definitions, making it easy to ensure that the client and server is kept in sync as your API evolves. Floyd has done his research and decided to use the gRPC-Gateway for the new HashiPet API service.

* Designing the API

- Floyd wants to create a resource-oriented HTTP/JSON API
- Pet is our resource
- Create, Get, List and Delete

.image rest.png 350 _
.caption This phrase has lost all its original meaning

: So lets see what this looks like in practice. Floyd has read about resource-oriented RESTful APIs and would like to create one of those, thank you very much. To do that, he'll start by identifying the primary resource, the pet. He'll then define and implement the 4 simplest methods: Create, Get, List and Delete. Lets take a look at what that looks like!

* The initial API

[[https://github.com/johanbrandhorst/hashipet]]

: Lets take a look at Floyds first stab at the API implementation. If you want to, you can clone this repository yourself and follow along with the presentation.
: Floyd isn't quite done yet though, he's still got a few more things he'd like to implement. To start with, he'd like to add some way to update his profile so that everyone knows who the is the best pet. To do that he'd like to add partial updates to the API.

* Establish dominance

- Make Floyd the *best*
- Add new field to Pet type
- Make it easy and ergonomic
- Use the gRPC-Gateway PATCH handling

: Floyd wants to make sure that everyone knows that he is the best oh yes he is. He adds a new field to the Pet type, and adds a new method for making updates to an existing Pet. He is keen to make sure that the API is still easy and ergonomic. To do this, he'll leverage the gRPC-Gateway PATCH handling. Lets take a look at what that looks like!
: Now, there is just one problem with this structure. Floyd has a good friend, the queen of talk-pets. I am, of course, talking about Penny.

* Penny

- Queen of *#talk-pets*
- _Not_ the best

.image penny.jpeg 400 _
.caption Penny, red team engineer

: Penny, who lives with Caroline, is great, she always poses with her toe beans on Toebean Tuesday, but she is decidedly NOT the best. The current API documentation would allow Penny, also an accomplished red team engineer, to discover that she can make a request to her profile that lets her set herself to the best. We need to hide the field. To do that, we'll use the gRPC-Gateway's internal field hiding capabilities. Let's see what that looks like.
: Finally, Floyd wants to make a web page.

* Present the Pets

- Serve a page with all the pets

.image web.png 300 _

: Floyd wants to finish the API off with a method that's not really restful nor resource-oriented, because as we said he knows just enough HTML to be dangerous, and he thought it would be nice with a page that could show all the pets together. To do that, he'll use the gRPC-Gateway HTTPBody handling. This gives Floyd complete control over what gets written in the response, as we'll see. Let's take a look at what that looks like.
: Let's cover a few of the other things that the Gateway is capable of that Floyd didn't have time for this time.

* Others

- Custom Error handling
- Mutating responses
- Go Templates documentation
- Field behavior
- Server side streaming
- /health check proxying

.image scientist.svg 200 _
.caption Gopher by [[https://twitter.com/egonelbre][@egonelbre]].

: There's custom error handling, which lets you define exactly the shape of the errors returned. There's the forward response handler, which leaves you with complete control over all the responses sent to the client, useful for things like setting cookie headers. Using Go templates in your protobuf comments can let you dynamically build your comments, which greatly enhances your API documentation. Field behavior lets you control what fields are marked as required and optional in your API documentation. Server side streaming can be used to stream updates to the client. A recent contribution added the automatic translation from a HTTP health check endpoint to the gRPC health checking protocol. These are only some of the little known features available in the gRPC-Gateway.
: So lets wrap up with what we learned today

* Wrapping up

- Floyd has created an API
- We've learned about the gRPC-Gateway
- We've learned about some lesser known features

.image relax.png 350 _
.caption [[https://github.com/tottie000][¬©tottie]] / Ren√©e French

: Floyd has shown us how to create a simple, resource-oriented HTTP/JSON API for the talk-pets Slack channel. We learned about the gRPC-Gateway, a tool that is powering many of the HashiCorp products. We learned about some of the lesser known features of the gateway, which may be useful to us as we keep building out features on our own products.

* Thanks to

- Justin Herreman and Floyd üêΩ
- Caroline Paine and Penny üê±
- Irena Rindos and Bear üê∫

.image all.jpeg 370 _
.caption The *#talk-pets* gang

: Thanks to Justin, Caroline and Irena for having such wonderful pets and letting me share them for this presentation. I hope you enjoyed it, if you want to talk about the gRPC-Gateway or anything else API related, I'm always around on Slack and the tech-grpc channel is a great place for such discussions. Thanks for watching
