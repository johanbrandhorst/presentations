gRPC-Web with GopherJS
19 Sep 2017

Johan Brandhorst
Software Engineer, InfoSum
johan.brandhorst@gmail.com
@johanbrandhorst
https://jbrandhorst.com

: I'm Johan, InfoSum
: Go for 1.5 years, loving it.
: Convinced to talk here today by Paul (point), my first technical talk, hope to catch your interest and imagination

* Synopsis

- What
- Why
- How
- Demo

: Lets start with a quick overview, talk about what, why, how and then show a demo at the end
: This will probably be a bit fast for the uninitiated but I had quite a few things I wanted to cover,
: so bear with me and please ask questions at the end.
: (Pause)

* What

- GopherJS
- gRPC-Web

: We'll take a quick look at these technologies that form the base of my work

* GopherJS

- Go to JS transpiler

.image gopherjs.png _ 500

: Show of hands, who attended Pauls GopherJS talk GolangUK?
: You'll already have seen some of what I'm about to show today
: Go to JS Transpiler, unlocking the magic of Go in the frontend

* gRPC-Web

- Privately being developed by gRPC team
- Third party client introduced by Improbable [[https://improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis][in April]]
- Built on [[https://github.com/google/protobuf/tree/master/js][Google ProtobufJS]]
- Fully compliant with [[https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md][the official grpc-web spec]]
- Payloads are binary encoded proto messages

Caveats:
- Does _not_ support client-side streaming
- Generators require separately generated ProtobufJS files


: By now well established in the backend, the browser client implementation of gRPC has been
: under development in a private google repo for over a year. Original plans was to release Q1 2017.
: Improbable introduced third party spec-compliant implementation, written in TypeScript.
: Having worked with both, the Improbable one is more feature complete.
: Personal theory is that google has dropped development on grpc-web until support for client
: streams land with the finalising of the Fetch/Streams API.
: Neither implementation supports client side streaming, but we'll see that it can be worked around
: Both implementations are built on top of the existing protobufJS generated files, which is both good and bad.

* Why

- Whats wrong with JSON/REST?

.image status_quo.svg

- JSON Payloads
- Custom marshaling code both ends
- HTTP 1.1

: This is the de facto standard way of working with the backend today. There are a couple of problems here.
: Firstly, using JSON as the payload between the server and the client introduces unnecessary overhead, both in terms
: of marshalling and unmarshalling, and in terms of payload size. In highly optimised environments, JSON marshalling and unmarshalling can become a bottleneck.
: Secondly, it doesn't formalise the contract between the backend and frontend, meaning frontend engineers and backend engineers need to ensure they are always keeping
: each other up-to-date with the latest changes to the interface. This causes friction, which slows down development.
: Thirdly, there's no easy way of supporting streams here. Can be worked around with websockets,
: but previous caveats still apply. Not to mention this is a JS app we're talking about. Javascript! Need I say more?
: (Pause)

* There must be a better way!

.image raymond.jpg

(With apologies to Rob Pike)

: THERE MUST BE A BETTER WAY (bang fist on table)
: This is Raymond Hettinger, and although he's a Python guru, I like to remember this quote whenever
: I see something that seems silly. This applies very well to Go in my experience as well.

* A better way

.image better_way.svg

- Binary Payloads
- Generated marshalling code
- HTTP 2 where possible

: Of course, the backend-to-backend communications have long since moved away from
: this model, (right?) and so why shouldn't we be able to have the benefits of
: gRPC in the communications between the frontend and the backend of a normal web server?
: gRPC-web allows us to abstract away the problems with the JSON/REST model. By
: generating the client and server code from one source of truth, the protofiles,
: we can get type safety and improvements in speed.
: Now you will notice on this graph that it says "GopherJS" app, but I haven't yet shown you
: how we can take advantage of the TypeScript gRPC-Web library in our GopherJS applications.

* GopherJS gRPC-Web and Protobuf bindings

- Combining the benefits of GopherJS with the benefits of gRPC-Web
- [[https://github.com/johanbrandhorst/protobuf]]
- `protoc-gen-gopherjs` built on top of GopherJS ProtobufJS bindings
- No dependency on `protoc`-generated JS files
- Supports Client-side streaming via websocket proxy

: Shortly after getting access to the private gRPC-Web working repo in March I started work on GopherJS bindings
: for the new library. Unfortunately, this meant learning a lot of things about nginx and the Google Closure Compiler
: and reading a lot of JavaScript. I never got this prototype to work, partially because the proxy written by
: the Google grpc-web team was a C++ nginx extension, and building and testing it was a nightmare.
: Therefore, I was super excited to try again when I read the blog post from Improbable about their gRPC-Web client.
: This meant forgetting everything I had learned about the Google Closure Compiler and instead turning to WebPack,
: but I'm starting to think this is a rite of passage all developers working with JS go through.
: In any case, I did eventually get this one to work, and many revisions later
: today I'm happy to say that not only does my bindings provide a one-stop-shop for gRPC-Web, it also comes with support
: for client-side streaming and bidi streaming in the browser via a custom websocket proxy.
: We'll dig right into how we can start working with this library.

* How

- Define the interface
- Generate the code
- Import generated packages and use/implement the provided interfaces

: These steps will be familiar to anyone who has worked with gRPC before.
: If you haven't used gRPC before, the steps are roughly as follows:
: 1. Write a protofile, 2. Run protoc, 3. Import packages into your logic.

* Define the interface and generate the code

.code book_service.proto /START OMIT/,/END OMIT/

Get the plugin:

    go get -u github.com/johanbrandhorst/protobuf/protoc-gen-gopherjs

Generate with protoc:

    protoc --gopherjs_out=plugins=grpc:./client/proto/library/ proto/book_service.proto

: This abbreviated example shows how to define RPC methods with the 4 different modes: Unary, Server Streaming, Client Streaming and Bidirectionally streaming.
: The full proto file can be found on my example repo.
: The generation step requires protoc-gen-gopherjs to be installed, which you can get by running go get ...
: This generation leaves us with the package example which provides the interface our frontend code can use.
: Of course, the same protofile should be used to generate the backend interface.

* Import generated packages

.code generated.go

: If you've ever written a gRPC Go Client before this step should feel very familiar. The code generated by protoc-gen-gopherjs
: is designed to be as similar as possible to that of a native Go client. We have a function for creating
: a new client for each service defined, and methods for each endpoint on that service.
: Note that all the methods are blocking, and since we're working with Go that gets compiled to Javascript,
: it means we have to wrap all our calls in goroutines. It's one of the quirks of GopherJS.
: I'm not going to show too much of the client code here because it can be implemented in many different ways
: but is essentially a GopherJS design decision, and we are short on time!

* Demo

Visit https://grpcweb.jbrandhorst.com to join the chat!
.iframe https://grpcweb.jbrandhorst.com/ 500 975

* Conclusion

gRPC-Web makes the frontend a first class citizen of the gRPC ecosystem.

.image grpc_with_web.svg 500 975

: We've shown that it's possible today to write a frontend client in Go, communicate with a regular
: Go backend over HTTP2/Websockets gRPC via a proxy. The future is

* Links and Thanks

- [[https://github.com/johanbrandhorst/protobuf][The GopherJS Protobuf repo]]
- [[https://github.com/improbable-eng/grpc-web][The Improbable TypeScript gRPC-Web Client]]
- [[https://github.com/myitcv/react/wiki][Pauls GopherJS React Bindings]]
- [[https://jbrandhorst.com/post/gopherjs-grpcweb/][My blog post further detailing the GopherJS gRPC-Web Bindings]]

Thanks

- [[https://improbable.io][Improbable]] for their amazing gRPC-Web library (special shoutout to [[https://twitter.com/mwitkow][@mwitkow]] for his amazing gRPC community contributions)
- [[https://github.com/neelance][Richard Musiol]], [[https://github.com/shurcooL][Dmitry Shuralyov]] and others in the GopherJS community
- [[https://twitter.com/_myitcv][Paul Jolly]] for his excellent work on GopherJS and the React bindings

