// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: protofile.proto

/*
	Package shop is a generated protocol buffer package.

	It is generated from these files:
		protofile.proto

	It has these top-level messages:
		CatToy
		GetCatToyRequest
*/
package shop

import jspb "github.com/johanbrandhorst/protobuf/jspb"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

type CatToy struct {
	Id    string
	Name  string
	Price uint32
}

// GetId gets the Id of the CatToy.
func (m *CatToy) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetName gets the Name of the CatToy.
func (m *CatToy) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetPrice gets the Price of the CatToy.
func (m *CatToy) GetPrice() (x uint32) {
	if m == nil {
		return x
	}
	return m.Price
}

// MarshalToWriter marshals CatToy to the provided writer.
func (m *CatToy) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Id) > 0 {
		writer.WriteString(1, m.Id)
	}

	if len(m.Name) > 0 {
		writer.WriteString(2, m.Name)
	}

	if m.Price != 0 {
		writer.WriteUint32(3, m.Price)
	}

	return
}

// Marshal marshals CatToy to a slice of bytes.
func (m *CatToy) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a CatToy from the provided reader.
func (m *CatToy) UnmarshalFromReader(reader jspb.Reader) *CatToy {
	for reader.Next() {
		if m == nil {
			m = &CatToy{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Id = reader.ReadString()
		case 2:
			m.Name = reader.ReadString()
		case 3:
			m.Price = reader.ReadUint32()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a CatToy from a slice of bytes.
func (m *CatToy) Unmarshal(rawBytes []byte) (*CatToy, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type GetCatToyRequest struct {
	ToyId string
}

// GetToyId gets the ToyId of the GetCatToyRequest.
func (m *GetCatToyRequest) GetToyId() (x string) {
	if m == nil {
		return x
	}
	return m.ToyId
}

// MarshalToWriter marshals GetCatToyRequest to the provided writer.
func (m *GetCatToyRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.ToyId) > 0 {
		writer.WriteString(1, m.ToyId)
	}

	return
}

// Marshal marshals GetCatToyRequest to a slice of bytes.
func (m *GetCatToyRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a GetCatToyRequest from the provided reader.
func (m *GetCatToyRequest) UnmarshalFromReader(reader jspb.Reader) *GetCatToyRequest {
	for reader.Next() {
		if m == nil {
			m = &GetCatToyRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.ToyId = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a GetCatToyRequest from a slice of bytes.
func (m *GetCatToyRequest) Unmarshal(rawBytes []byte) (*GetCatToyRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion2

// Client API for CatServer service

// CatServer is used to browse and sell cat products 🐱🐱🐱
type CatServerClient interface {
	// GetCatToy gets a cat toy 🐱🐱🐱
	GetCatToy(ctx context.Context, in *GetCatToyRequest, opts ...grpcweb.CallOption) (*CatToy, error)
}

type catServerClient struct {
	client *grpcweb.Client
}

// NewCatServerClient creates a new gRPC-Web client.
func NewCatServerClient(hostname string, opts ...grpcweb.DialOption) CatServerClient {
	return &catServerClient{
		client: grpcweb.NewClient(hostname, "shop.CatServer", opts...),
	}
}

func (c *catServerClient) GetCatToy(ctx context.Context, in *GetCatToyRequest, opts ...grpcweb.CallOption) (*CatToy, error) {
	resp, err := c.client.RPCCall(ctx, "GetCatToy", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(CatToy).Unmarshal(resp)
}
